;; extends
;; COMMONS
(("return"   @keyword.function) (#set! conceal "Û∞åë"))
(("["     @punctuation.bracket) (#set! conceal "‚é£"))
(("]"     @punctuation.bracket) (#set! conceal "‚é§"))
(
  (comment) @comment
  (#contains? @comment "TODO")
) @TODOComment ;don't forget to add this new group to for example catppuccin

; (("return"   @keyword.function) @Boolean)
;; TSX
(("function"     @keyword.function) (#set! conceal "Û∞äï"))
(("interface" @keyword) (#set! conceal "‚Ö†"))
(("import" @keyword.import) (#set! conceal "üòà"))
(("const" @keyword) (#set! conceal "‚Ö≠"))
(("type" @keyword) (#set! conceal "Œ§"))
(("let" @keyword) (#set! conceal "‚Ö¨"))
(("export"     @keyword.export) (#set! conceal "ü¢¶"))

; alternative: https://github.com/luckasRanarison/tailwind-tools.nvim/blob/master/queries/tsx/class.scm
(
  (property_identifier) @att_name
  (#any-of? @att_name "class" "className")
  ; both string and string_fragment are for inside the quotes
  ; if I only put string @att_value, it will replace all after =, including quotes
  (string (string_fragment) @att_val)
  (#substr! @att_val 20 -1)
  (#set! @att_val conceal "‚Ä¶")
)
; (
;   (comment) @comment
;   (#match? @comment "^//.*[x]")
;   (#substr! @comment 3 6)
;   (#set! @comment conceal "‚úÖ")
; )
; (
;   (comment) @comment
;   (#contains? @comment "[x]")
;   ; this looks for the first find
;   (#find_set_range! @comment "[x]")
;   ; this sets metadata.conceal for this node
;   ; if we want more, we need more nodes
;   (#set! @comment conceal "‚òë")
; )
; (
;   (comment) @comment
;   (#contains? @comment "[ ]")
;   (#find_set_range! @comment "[ ]")
;   (#set! @comment conceal "‚òê")
; )
